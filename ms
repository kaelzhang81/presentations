https://toutiao.io/posts/2vzj5i/preview
https://springcloud.cc/spring-cloud-dalston.html#_spring_cloud_sleuth
http://www.chepoo.com/stability-of-high-performance-and-high-concurrency-system-of-jingdong.html


在自注册模式中，服务实例自身负责在服务注册表中注册和注销。如果需要的话，一个服务实例发送心跳请求防止注册过期。

在第三方注册模式中，服务实例不会自己在服务注册表中注册，而由服务管理器负责。服务管理器通过轮询部署环境或订阅事件去跟踪运行中的实例变化。当它发现一个新的可用的服务实例时，就会到注册表中去注册。服务管理器也会注销已停止的服务实例。

客户端通过负载均衡器向一个服务发送请求，这个负载均衡器会查询服务注册表，并将请求路由到可用的服务实例上。通过负载均衡器的服务发现，服务实例在服务注册表上被注册和注销。

优势：

与自注册模式相比，服务代码复杂程度更低，因为其无需实现自动注册。

注册工具可对服务实例执行健康检查，并根据检查结果注册或者注销该实例。


弊端：

第三方注册模式可能只了解服务实例的一些表层状态，例如其是否正在运行，因此 无法了解其是否能够处理请求。不过，之前提到的Netflix Prana等注册工具能够通过执行健康检查来判断当前服务实例的可用性。

除非该注册工具属于基础设施的一部分，否则我们需要对其进行安装、配置与维护。另外，因为它是关键系统组件，因此需要保证其具有高度可用性。

一个大型的系统是由众多的微服务组成，服务之间可能存在复杂的依赖和关联关系。

延迟连接：一个微服务启动时不关心其所依赖的服务是否启动，仅在需要时进行连接。
重试机制：连接失败的情况下需具备重试机制，不应该直接程序异常或者进程终止。
快速失败：具备熔断能力，在依赖服务不可用时，可以快速失败，防止拖垮整个系统。

限流
限流原则：影响到用户体验，谨慎使用
区分正常流量和超预期流量：限流标准来自压力测试、折算
读少限，写多限
客户端配合限流
不同分组的限流阈值
各层限流手段

前置限流，快速失败：比如通过提供给调用方的JSF客户端，封装限流逻辑。
Nginx层限流：自主研发的模块；几个规则：账户，IP，系统调用流程。
应用限流：减少并发数线程数；读少限，写多限；DB限流；连接数。

降级
保证用户的核心需求
降级需要有预案和开关：确定系统和功能级别，是否可降，影响如何；降级需要有开关
非关键业务屏蔽：购物车的库存状态
业务功能模块降级：实时价格更新不及时；peking库，保订单管道、生产，暂停统计相关
数据降级：动态降级到静态；远程服务降级到本地缓存：采销岗服务

监控五原则
监控容器及其里面的东西。
在服务性能上做监控，而不是容器性能。
监控弹性和多地部署的服务。
监控API。
将监控映射到组织结构。

Spring Cloud是一个基于Spring Boot的微服务开发工具，它为微服务架构中涉及配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。

Zuul是在云平台上提供动态路由，监控，弹性，安全等边缘服务的框架。Zuul相当于是设备和Netflix流应用的Web网站后端所有请求的前门。

声明式服务调用客户端。只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。具备可插拔的注解支持，扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。
